#include <math.h>
#include <raylib.h>
#include <stdio.h>
#include <stdlib.h>

#define SCREEN_W 1280
#define SCREEN_H 1280

#define CUBE_SIZE 5
#define PRECISION 3

bool cube[CUBE_SIZE * PRECISION][CUBE_SIZE * PRECISION][CUBE_SIZE * PRECISION];

Vector3 center = (Vector3){0, 0, 0};

Vector3 sphere_pos(float r, float xa, float ya) {
  Vector3 v;

  v.x = r * sinf(xa) * cosf(ya);
  v.z = r * sinf(xa) * sinf(ya);
  v.y = r * cosf(xa);

  return v;
}

void fill_randomly(float density) {
  int s = CUBE_SIZE * PRECISION;
  for (int x = 0; x <= s; ++x) {
    for (int y = 0; y <= s; ++y) {
      for (int z = 0; z <= s; ++z) {
        float p = (float)rand() / RAND_MAX;
        cube[x][y][z] = p < density;
      }
    }
  }
}

void DisplayCube() {
  int s = CUBE_SIZE * PRECISION;

  float size = (float)CUBE_SIZE / PRECISION;
  for (int x = 0; x <= s / 2; ++x) {
    for (int y = 0; y <= s / 2; ++y) {
      for (int z = 0; z <= s - 1; ++z) {
        if (cube[x][y][z]) {
          Vector3 pos =
              (Vector3){(float)(x + 1) / PRECISION - (float)CUBE_SIZE / 2,
                        (float)y / PRECISION - (float)CUBE_SIZE / 2,
                        (float)z / PRECISION - (float)CUBE_SIZE / 2};

          DrawCube(pos, size, size, size, RED);
        }
      }
    }
  }

  DrawCubeWires(center, CUBE_SIZE, CUBE_SIZE, CUBE_SIZE, WHITE);
}

int main() {

  srand(69);

  InitWindow(SCREEN_W, SCREEN_H, "Game Of Life 3D");
  SetTargetFPS(60);

  float radius = 12.5f;
  float x_angle = PI / 2;
  float y_angle = 0.0f;

  float rot_speed = 0.01f;

  Camera3D cam;
  cam.position = sphere_pos(radius, x_angle, y_angle);
  cam.target = (Vector3){0, 0, 0};
  cam.up = (Vector3){0, 1, 0};
  cam.fovy = 45.0f;
  cam.projection = CAMERA_PERSPECTIVE;

  fill_randomly(0.1);

  while (!WindowShouldClose()) {

    if (IsKeyDown(KEY_RIGHT))
      y_angle -= rot_speed;
    if (IsKeyDown(KEY_LEFT))
      y_angle += rot_speed;
    if (IsKeyDown(KEY_UP))
      x_angle -= rot_speed;
    if (IsKeyDown(KEY_DOWN))
      x_angle += rot_speed;

    cam.position = sphere_pos(radius, x_angle, y_angle);

    BeginDrawing();

    ClearBackground(DARKGRAY);

    BeginMode3D(cam);

    DrawGrid(10, 10.0f);
    DisplayCube();

    EndMode3D();

    EndDrawing();
  }

  CloseWindow();

  return 0;
}
